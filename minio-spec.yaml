openapi: 3.0.1
info:
  title: Minio Server
  description: "This is the api for Minio."
  version: 1.1.0
servers:
  - url: http://localhost:8080
  - url: https://yapptir.com
tags:
  - name: authenticate
    description: "The endpoint for authentication. Here you can register you clients in order to begin with the socket communication"
  - name: assset
    description: "The endpoint for managing necessary assets."
  - name: channel
    description: "The endpoint for publish and subscribe within a namespace"
  - name: collection
    description: "CRUD operations for the collections. A collection is the represantation of a list of entries in the database"
paths:      
  /authenticate:
    post:
      tags:
        - authenticate
      summary: Authentication for retrieving the token
      description: Authenticate in order to get the token for further requests
      requestBody:
        content:
          "application/json":
            schema:
              $ref:  "#/components/schemas/authBody"
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authResponse'
  /authenticate/register:
    post:
      tags:
        - authenticate
      summary: Create a new subscription
      description: Create a new subscription in order to get a token for further requests
      requestBody:
        content:
          "application/json":
            schema:
              $ref:  "#/components/schemas/authRegisterBody"
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authRegisterResponse'
  /collection/{schema}:
    parameters:
      - name: schema
        in: path
        description: The schema of the collection
        required: true
        schema:
          type: string
    get:
      tags:
        - collection
      summary: Gets a collection by name
      description: Gets a collection by name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {
                type: "array",
                items:{
                  type: "string"
                }
              }
      security:
        - bearerAuth: []
    put:
      tags:
        - collection
      summary: Replaces the whole collection with the given one 
      description: Replaces the whole collection with the given one
      requestBody:
        content:
          application/json:
              schema: {
                type: "array",
                items:{
                  type: "object"
                }
              }
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema: {
                type: "array",
                items: {
                  type: "object"
                }
              }
    post:
      tags:
        - collection
      summary: Adds a new item to the collection
      description: Adds a new item to the collection
      requestBody:
        content:
          application/json:
              schema: {
                type: "object"
              }
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema: {
                type: "array",
                items:{
                  type: "object"
                }
              }
      security:
        - bearerAuth: []
  /collection/{schema}/{id}:
    parameters:
      - name: schema
        in: path
        description: The schema of the collection
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The id of the item in the collection
        required: true
        schema:
          type: string
    put:
      tags:
        - collection
      summary: Replaces the item in the collection with the one in the request body
      description: Replaces the item in the collection with the one in the request body
      requestBody:
        content:
          application/json:
              schema: {
                type: "string"
              }
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema: {
                type: "array",
                items:{
                  type: "string"
                }
              }
    delete:
      tags:
        - collection
      summary: Deletes the item in the collection that matches the id
      description: Deletes the item in the collection that matches the id
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema: {
                type: "array",
                items:{
                  type: "string"
                }
              }
  /collection/{schema}/{relations}:
    parameters:
      - name: schema
        in: path
        description: The schema of the collection
        required: true
        schema:
          type: string
      - name: relations
        in: path
        description: The depending models of the schema
        required: true
        schema:
          type: array
          items: {
            type: "string"
          }
    get:
      tags:
        - collection
      summary: Gets a collection by name with resolving the relations
      description: Gets a collection by name with resolving the relations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {
                type: "array",
                items:{
                  type: "string",
                }
              }
      security:
        - bearerAuth: []
  /channel/{channelId}:
    post:
      tags:
        - channel
      summary: Create a new chanel
      description: Creates a new channel for sending broadcasts within the namespace
      parameters:
        - name: channelId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          "application/json":
            schema:
              $ref:  "#/components/schemas/authBody"
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authResponse'
components:
  schemas:
    authBody:
      type: object
      properties:
        email:
          type: "string"
          description: "A unique id like the mail address"
        password:
          type: "string"
          description: "The password of the depending clientId"
    authResponse:
      type: object
      properties:
        success:
          type: "boolean"
          description: "Indicates whether the request was successfull or not"
        token:
          type: "string"
          description: "The jwt token in order to verify further requests with the Rest API or Socket communication"
    authRegisterBody:
      type: object
      properties:
        username:
          type: "string"
          description: "A unique identifier for the profile"
        email:
          type: "string"
          description: "A unique id like the mail address"
        password:
          type: "string"
          description: "The password of the depending clientId"
    authRegisterResponse:
      type: object
      properties:
        success:
          type: "boolean"
          description: "Indicates whether the request was successfull or not"
        profile:
          type: "string"
          description: "The jwt token in order to verify further requests with the Rest API or Socket communication"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT